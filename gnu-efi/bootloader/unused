wchar_t *CSTRTOWCHAR(char *cstr, EFI_SYSTEM_TABLE *SystemTable) {
	wchar_t *toret;
	SystemTable->BootServices->AllocatePool(EfiLoaderData, sizeof(wchar_t) * strlen(cstr), (void **)&toret);
	for (int i = 0; cstr[i] != 0; i++) {
		toret[i] = (wchar_t)cstr[i];
		toret[i + 1] = 0;
	}
	return toret;
}


void ShowCursor(BOOLEAN visible) {
	ST->ConOut->EnableCursor(ST->ConOut,visible);
}

void SetColour(UINTN colour) {
	ST->ConOut->SetAttribute(ST->ConOut, colour);
}

void SetCursorPos(UINTN x,UINTN y) {
	ST->ConOut->SetCursorPosition(ST->ConOut,x,y);
}

EFI_INPUT_KEY GetKey(EFI_SYSTEM_TABLE *SystemTable) {
	SystemTable->ConIn->Reset(SystemTable->ConIn, 1);
	EFI_INPUT_KEY Key;
	while((SystemTable->ConIn->ReadKeyStroke(SystemTable->ConIn, &Key)) == EFI_NOT_READY);
	return Key;
}

char *ReadText(wchar_t *filename, EFI_HANDLE ImageHandle, EFI_SYSTEM_TABLE *SystemTable) {
	EFI_FILE *f = ReadFile(NULL, filename, ImageHandle, SystemTable);
	if (f == NULL)
		return 0;
	char *buf;
	SystemTable->BootServices->AllocatePool(EfiLoaderData, sizeof(char) * 2048, (void **)&buf);
	UINTN size = sizeof(char) * 2048;
	buf = "";
	f->Read(f, &size, buf);
	buf[2048] = 0;
	return buf;
}

void ClearScreen() {
	ST->ConOut->ClearScreen(ST->ConOut);
	SetCursorPos(0,0);
}
UINTN strcmp(CHAR8* a,CHAR8* b,UINTN length) {
	for(UINTN i = 0;i < length;i++)
		if(*a != *b) return 0;
	return 1;
}

int strlen(char *s) {
	int z = 0;
	for (int i = 0; s[i] != 0; i++)
		z = i;
	return z;
}